<?php

/**
 * @file
 * Implements Dwolla payment services for use in Drupal Commerce.
 */

/**
 * Implements hook_commerce_payment_method_info().
 *
 * This hook will define the Dwolla payment method
 */
function dwolla_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['dwolla'] = array(
    'base' => 'dwolla',
    'title' => t('Dwolla'),
    'short_title' => t('Dwolla'),
    'display_title' => t('Dwolla'),
    'description' => t('Integrates Dwolla payment system'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,

  );

  return $payment_methods;
}

/**
 * Payment method callback: settings form.
 *
 * Returns form elements for the payment method's settings form included
 * as part of the payment method's enabling action in Rules
 */
function dwolla_settings_form($settings = NULL) {
  $form = array();

  $settings = (array) $settings + array(
    'accountid' => '',
    'apikey' => '',
    'apisecret' => '',
    'account' => 'live',
  );

  // BASIC settings
  $form['accountid'] = array(
    '#type' => 'textfield',
    '#title' => t('Dwolla Account ID'),
    '#description' => t('Dwolla account ID receiving the funds. Format : XXX-XXX-XXXX.'),
    '#default_value' => $settings['accountid'],
  );
  $form['apikey'] = array(
    '#type' => 'textfield',
    '#title' => t('API Key'),
    '#description' => t('The key used for the Dwolla API'),
    '#default_value' => $settings['apikey'],
  );
  $form['apisecret'] = array(
    '#type' => 'textfield',
    '#title' => t('API Secret'),
    '#description' => t('The secret code used for the Dwolla API'),
    '#default_value' => $settings['apisecret'],
  );
  $form['account'] = array(
    '#type' => 'radios',
    '#title' => t('Dwolla Server'),
    '#options' => array(
      'live' => ('Live'),
      'test' => ('Test'),
    ),
    '#default_value' => $settings['account'],
    '#description' => t('Perform transactions on the live or test server. The test server will only work for developers with Dwolla test accounts.'),
  );
  // @TODO: LAYOUT settings
  $form['#submit'][] = 'dwolla_settings_form_submit';

  return $form;
}

/**
 * Payment method callback: redirect form
 *
 * returns form elements that should be submitted to the redirected
 * payment service
 */
function dwolla_redirect_form($form, &$form_state, $order, $payment_method) {
  // Return an error if accountid is not set.
  if (empty($payment_method['settings']['accountid'])) {
    drupal_set_message(t('Dwolla Account ID has not been specified.'), 'error');
    return array();
  }
  // Return an error if apikey is not set.
  if (empty($payment_method['settings']['apikey'])) {
    drupal_set_message(t('Dwolla API key needs to be set.'), 'error');
    return array();
  }
  // Return an error if apisecret is not set.
  if (empty($payment_method['settings']['apisecret'])) {
    drupal_set_message(t('Dwolla API Secret needs to be set.'), 'error');
    return array();
  }

  $settings = array(
    // Return to the previous page when the payment is cancelled.
    'cancel_return' => url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),

    // Return to the payment redirect page for processing successful payments.
    'return' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),

    // Specify the current payment method instance ID in the notify_url.
    'payment_method' => $payment_method['instance_id'],
  );

  return dwolla_order_form($form, $form_state, $order, $payment_method['settings'] + $settings);
}

