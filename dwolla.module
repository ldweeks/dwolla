<?php

/**
 * @file
 * Implements Dwolla payment services for use in Drupal Commerce.
 */

/**
 * Implements hook_commerce_payment_method_info().
 *
 * This hook will define the Dwolla payment method
 */
function dwolla_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['dwolla'] = array(
    'base' => 'dwolla',
    'title' => t('Dwolla'),
    'short_title' => t('Dwolla'),
    'display_title' => t('Dwolla'),
    'description' => t('Integrates Dwolla payment system'),
    'active' => TRUE,
    'offsite' => TRUE,
    'offsite_autoredirect' => FALSE,

  );

  return $payment_methods;
}

/**
 * Payment method callback: settings form.
 *
 * Returns form elements for the payment method's settings form included
 * as part of the payment method's enabling action in Rules
 */
function dwolla_settings_form($settings = NULL) {
  $form = array();

  $settings = (array) $settings + array(
    'accountid' => '',
    'apikey' => '',
    'apisecret' => '',
    'account' => 'live',
  );

  // BASIC settings
  $form['accountid'] = array(
    '#type' => 'textfield',
    '#title' => t('Dwolla Account ID'),
    '#description' => t('Dwolla account ID receiving the funds. Format : XXX-XXX-XXXX.'),
    '#default_value' => $settings['accountid'],
    '#required' => TRUE,
  );
  $form['apikey'] = array(
    '#type' => 'textfield',
    '#title' => t('API Key'),
    '#description' => t('The key used for the Dwolla API'),
    '#default_value' => $settings['apikey'],
    '#required' => TRUE,
  );
  $form['apisecret'] = array(
    '#type' => 'textfield',
    '#title' => t('API Secret'),
    '#description' => t('The secret code used for the Dwolla API'),
    '#default_value' => $settings['apisecret'],
    '#required' => TRUE,
  );
  $form['account'] = array(
    '#type' => 'radios',
    '#title' => t('Dwolla Server'),
    '#options' => array(
      'live' => ('Live'),
      'test' => ('Test'),
    ),
    '#default_value' => $settings['account'],
    '#description' => t('Perform transactions on the live or test server. The test server will only work for developers with Dwolla test accounts.'),
  );
  // @TODO: LAYOUT settings
  $form['#submit'][] = 'dwolla_settings_form_submit';

  return $form;
}

/**
 * Payment method callback: redirect form
 *
 * returns form elements that should be submitted to the redirected
 * payment service
 */
function dwolla_redirect_form($form, &$form_state, $order, $payment_method) {
  // Return an error if accountid is not set.
  if (empty($payment_method['settings']['accountid'])) {
    drupal_set_message(t('Dwolla Account ID has not been specified.'), 'error');
    return array();
  }
  // Return an error if apikey is not set.
  if (empty($payment_method['settings']['apikey'])) {
    drupal_set_message(t('Dwolla API key needs to be set.'), 'error');
    return array();
  }
  // Return an error if apisecret is not set.
  if (empty($payment_method['settings']['apisecret'])) {
    drupal_set_message(t('Dwolla API Secret needs to be set.'), 'error');
    return array();
  }

  $settings = array(
    // Return to the previous page when the payment is cancelled.
    'cancel_return' => url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),

    // Return to the payment redirect page for processing successful payments.
    'return' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),

    // Specify the current payment method instance ID in the notify_url.
    'payment_method' => $payment_method['instance_id'],
  );

  dwolla_build_redirect_form($form, $form_state, $order, $payment_method['settings'] + $settings);
}

/**
 * Helper function for the redirect_form callback.
 * Generate the CheckoutID and redirect to dwolla site
 */
function dwolla_build_redirect_form($form, &$form_state, $order, $settings) {
  global $user;
  $wrapper = entity_metadata_wrapper('commerce_order', $order);

  // Get financial info
  $currency_code = $wrapper->commerce_order_total->currency_code->value();
  $amount = $wrapper->commerce_order_total->amount->value();
  $customer_name = $wrapper->commerce_customer_billing->commerce_customer_address->name_line->value();

  // Build the data array
  if($settings['account'] == 'test') {
    $test = 'true';
  } else {
    $test = 'false';
  }
  
  $data = array(
    // General parameters
    'Key' => $settings['apikey'],
    'Secret' => $settings['apisecret'],
    'DestinationId' => $settings['accountid'],
    'OrderId' => $order->order_number,
    'Amount' =>  $amount,
    'Test' => $test,

    // Feedback URLs
    'Redirect' => $settings['return'],

    // Layout
    'Name' => t('@store', array('@store' => variable_get('site_name', url('<front>', array('absolute' => TRUE))))),
    'Description' => t('Order @order_number at @store', array('@order_number' => $order->order_number, '@store' => variable_get('site_name', url('<front>', array('absolute' => TRUE))))),
    
  );

  $post_url = 'https://www.dwolla.com/payment/pay';
  
  //traverse array and prepare data for posting
  foreach ( $data as $key => $value) {
    if (!empty($value)) {
      $value = trim($value);
      $post_items[] = $key . '=' . $value;
    }
  }
   
  //create the final string to be posted using implode()
  $post_string = implode ('&', $post_items);
  
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0); 
  curl_setopt($ch, CURLOPT_URL, $post_url);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_POST, 1);
  curl_setopt($ch, CURLOPT_POSTFIELDS, $post_string);
  $result = curl_exec($ch); 
  
  if(curl_errno($ch))
    print curl_error($ch);
  else
    curl_close($ch);
    
  $response = $result;
  // Getting the checkout id from the response
  //  $checkout_id = 
  
  // Redirect to dwolla with checkout id
  //  $url = 'https://www.dwolla.com/payment/checkout/' . $checkout_id;
  //  header('Location: ' . $url . '');
  
}

function dwolla_error($order, $settings){

    /*
    * Revert the order back to Cart when an error occurs
    **/
    $order_state = commerce_order_state_load('cart');
    commerce_order_status_update($order, $order_state['default_status'], FALSE, TRUE, t('Order state updated due to error : .'));
    
    /*
    * Inform the user of the error and redirect to the review page
    **/
    drupal_set_message(t('There was a problem sending the order to Dwolla, please try again.'),'error');
    drupal_goto('checkout/'.$order->order_number);
    exit;
}
